generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  fullName          String
  email             String             @unique
  password          String
  phone             String?
  profession        String?
  adress            String?
  isAdmin           Boolean            @default(false)
  updatedAt         DateTime           @default(now()) @updatedAt
  createdAt         DateTime           @default(now())
  sendBy            Chat[]             @relation("sender")
  receiveFrom       Chat[]             @relation("receiver")
  avatar            Avatar?
  feedback          FeedBack[]
  message           Message[]
  groupChats        GroupChat[]
  groupChatAndUsers GroupChatAndUser[]
}

model Chat {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User?            @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?            @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages   ChatAndMessage[]
}

model GroupChat {
  id        String                @id @default(uuid())
  name      String
  ownerId   Int
  createdAt DateTime              @default(now())
  owner     User?                 @relation(fields: [ownerId], references: [id])
  users     GroupChatAndUser[]
  messages  GroupChatAndMessage[]
}

model Message {
  id         Int                   @id @default(autoincrement())
  text       String
  userId     Int
  read       Boolean               @default(false)
  createdAt  DateTime              @default(now())
  User       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats      ChatAndMessage[]
  groupChats GroupChatAndMessage[]
}

model GroupChatAndUser {
  groupChatId String
  userId      Int
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([groupChatId, userId])
}

model GroupChatAndMessage {
  groupChatId String
  messageId   Int
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id])
  message     Message   @relation(fields: [messageId], references: [id])

  @@id([messageId, groupChatId])
}

model ChatAndMessage {
  chatId    Int
  messageId Int
  chat      Chat    @relation(fields: [chatId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

model FeedBack {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  answer    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Avatar {
  id     Int     @id @default(autoincrement())
  link   String?
  userId Int     @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
